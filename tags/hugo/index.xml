<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on 漫步在數位靈魂之中</title>
    <link>https://chimerakang.github.io/tags/hugo/</link>
    <description>Recent content in hugo on 漫步在數位靈魂之中</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Chimera</copyright>
    <lastBuildDate>Wed, 14 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chimerakang.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build my first blog by Hugo and Github, auto deploy by Travis &lt;1&gt;</title>
      <link>https://chimerakang.github.io/posts/first-post/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chimerakang.github.io/posts/first-post/</guid>
      <description>前言  Hugo 是個快速產生靜態網站的工具，golang開發，快速有效，有很多theme可以支援 Github 是個工程師必備良藥，也支援Pages服務，就是靜態網頁，所以將Hugo建好的靜態網頁直接上傳到Github是很合適的組合，而且是免費又快速，還不用自己維護，這世界怎麼有這麼佛心的服務 Travis 是第一次接觸，大概瞭解了一下這是個提供高度自動化工具，只要寫個簡單的腳本，就可以支援很多自動化工作，剛好又高度整合Github。據說功能不僅止於此，有機會可以來做一些更複雜有趣的事情  安裝 Hugo mac使用者如果已經安裝brew的話，只要輸入以下指令即可安裝Hugo
brew install hugo  目前最新的版本應該是 0.56.3
建立部落格 開啟Terminal，只要輸入底下的指令，Hugo馬上會在blog這個目錄下產生所有需要的資源和程式碼
Hugo new site blog  修改 config.toml 接著開始做一些修改，首先進入目錄中需要修改config.toml，最重要的是新增theme，Hugo的生態系有相當多的theme，你可以選擇你喜歡的加入，底下是我的第一版的設定：
baseURL = &amp;quot;https://chimerakang.github.io/&amp;quot; languageCode = &amp;quot;en-us&amp;quot; defaultContentLanguage = &amp;quot;zh-tw&amp;quot; title = &amp;quot;Chimera&#39;s Blog&amp;quot; theme = &amp;quot;terminal&amp;quot; paginate = 5 [Author] name = &amp;quot;Chimera&amp;quot; [params] contentTypeName = &amp;quot;posts&amp;quot; themeColor = &amp;quot;green&amp;quot; showMenuItems = 2 # set theme to full screen width fullWidthTheme = false # center theme with default width centerTheme = false [languages] [languages.</description>
    </item>
    
    <item>
      <title>Build my first blog by Hugo and Github, auto deploy by Travis &lt;2&gt;</title>
      <link>https://chimerakang.github.io/posts/post2github/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chimerakang.github.io/posts/post2github/</guid>
      <description>Github設定 首先需要建立兩個Repository，一個是 Username.github.io，這個github會自動啟動pages服務。另外一個repository可以隨便命名，我命名為BlogSource，記得設定成private，這個倉庫是要放local電腦上所有hugo的相關資料和設定，因為有可能包含私人的參數，這些資料最好不要放在公開的repository上，避免有心人利用
BlogSource建立好之後，複製git網址並將網址加入到在本地端的hugo目錄的git config中，git相關的設定請自行搜尋建立相關知識。這裡github也很貼心的提供相關的操作，只要按照步驟應該能夠完成設定 再來我們要建立一個token，位置在 Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens -&amp;gt; Generate new token ，要將 repo:status, repo_deployment, public_repo三個選項勾起來
然後你會產生出來一串憑證，請保存起來，接著需要這個憑證可以讓 Travis-ci 執行自動化工作後，接著將最後的靜態網頁push to pages服務的repository上 Travis設定 到Travis-ci 建立一個帳號，可是事實上travis-ci.com已經跟github高度整合，只需要點擊右上角的，接著點擊 Manage repositories on Github，預設可以控制所有的repository，這樣有點恐怖，所以我這裡改成指定特定的倉庫即可 此時會回到Travis-ci，就可以看到BlogSource出現在列表中 開始設定token到Travis-ci，點擊BlogSource 旁的settings按鈕，如畫面將選項打開，同時新增一組Environment Variables，命名為GITHUB_TOKEN，Value就填入剛剛在github產生的憑證字串，然後按下Add。完畢後Travis-ci的設定工作就算完成了 撰寫 .travis.yml 最後我們回到local端，到hugo site的目錄下新增一個 .travis.yml，內容如下
language: go go: - &amp;quot;1.8&amp;quot; # 指定Golang 1.8 install: - wget https://github.com/gohugoio/hugo/releases/download/v0.55.4/hugo_0.55.4_Linux-64bit.deb - sudo dpkg -i hugo*.deb before_script: - echo -e &amp;quot;Host github.com\n\tStrictHostKeyChecking no\n&amp;quot; &amp;gt;&amp;gt; ~/.ssh/config - git config --global user.</description>
    </item>
    
  </channel>
</rss>